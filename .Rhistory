plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlable = Speed)
plot(x = cars$dist, y = cars$speed, xlable = "Speed")
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(x = cars$speed, y = cars$dist, main = "My Plot", sub = "My Plot Subtitle")
plot(x = cars$speed, y = cars$dist, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
play()
head(mcars)
head(mtcars)
nxt
nxt()
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
install.packages("dplyr")
library(dplyr)
?select
?substr
?unique
?subset
?intersect
?with
?range
?abline
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "Q3.xlsx", method = curl)
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "Q3.xlsx")
install.packages("RMySQL", type = "source")
library(RMySQL)
?dbConnect
Sys.getenv('MYSQL_HOME')
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
library(httr)
GET https://github.com/login/oauth/authorize
GET http://github.com/login/oauth/authorize
GET(" https://github.com/login/oauth/authorize")
GET(" http://github.com/login/oauth/authorize")
GET("github.com/login/oauth/authorize")
POST https://github.com/login/oauth/access_token
POST("github.com/login/oauth/access_token")
GET("api.github.com/user?access_token="    51e6b5b61834792a33f7195a1ea382af0a3e467a
GET("api.github.com/user?access_token=51e6b5b61834792a33f7195a1ea382af0a3e467a")
install.packages("httpuv")
q()
q()
install.packages("httpuv")
swirl()
libary(swirl)
library(swirl)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
?tbl_df
cran <- tb1_df(mydf`)
cran <- tb1_df(mydf)
cran <- tbl_df(mydf)
class(cran)
class(mydf)
?tbl_df
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:200
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-X:size)
select(-(X:size)
)
X
select(cran, -(X:sizee))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(size > 100500 AND r_os == "linux-gnu")
filter(size > 100500 & r_os == "linux-gnu")
filter(cruan, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(x(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version) )
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, ave_bytes = mean(size))
summarize(cran, ave_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran, package)
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(cran, mean = mean(size))
summarize(by_package, mean = mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_count <<- filter(pack_sum, count > 679)
top_count <- filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
rm("top_count")
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, prons = 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique+sorted <- arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
getwd
getwd()
swirl
swirl()
swirl()
library(tidyr)
students
?gather
gather(students, sex = "sex", count = "count", -grade)
hs
gather(students)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
submit()
submit()
submit()
submit()
submit()
student3
students3
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
submit()
submit()
?parse_number
submit()
View(cran2)
View(result3)
library(swirl)
swirl()
submit()
temp <- gather(students3, class, grade, class1:class5, na.rm = TRUE)
temp
temp <- spread(temp, test, grade)
temp
class
temp$class
submit()
parse_number(temp, class)
parse_number(temp, $class)
sapply(temp, parse_number)
submit
submit()
submit()
lapply(temp, parse_number)
mapply(temp, parse_number)
apply(temp, parse_number)
?apply
info()
skip()
submit
submit()
library(dplyr)
submit()
library(readr)
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(passed, status = "passed")
passed <- passed %>% mutate(, status = "passed")
passed <- passed %>% mutate( status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
skip()
submit()
sat
library(jpeg)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
class(this_day)
this_moment <- now()
this_moment
class(this_moment)
hour(this_moment)
ymd("1989-05-17")
my_date <-= ymd("1989-05-17")
my_date <-= ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrice
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
?instants
?durations
?period
stopwatch()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "Question04.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "Question04_edu.csv")
gdp <- read.csv("Question04.csv")
edu <- read.csv("Question04_edu.csv")
head(gdp)
library(dplyr)
gdp <- read.csv("Question04.csv", skip = 4)
head(gdp)
gdp <- select(gdp, X, X.1, X.3, X.4)
head(gdp)
gdp <- rename(gdp, CountryCode = X, rankingGDP = X.1, LongName = X.3, GDP = X.4)
head(gdp)
head(edu)
merged <- merge(gdp, edu, all = T, by = "CountryCode")
names(merged)
a <- grep("fiscal year end (.*) [jJ]une", merged$Special.Notes)
a
?tolower
a <- grep("fiscal year end(.*)june", merged$Special.Notes)
a
a <- grep("fiscal year end(.*)june", tolower(merged$Special.Notes)
)
a
a <- grep("fiscal year end.*june", tolower(merged$Special.Notes))
length(a)
download.packages("quantmod")
download.packages("quantmod")
.libPaths(new = "/home/someuser/R/library")
download.packages("quantmod")
download.packages("quantmod")
apt remove r-base
install.packages("quantmod")
amzn = getSymbols("AMZN", auto.assign = FALSE)
library(quantmod)
amzn = getSymbols("AMZN", auto.assign = FALSE)
sampleTimes = index(amzn)
head(amzn)
amzn[1]
amzn[[1]]
class(amzn)
amzn$AMZN.Open[1]
amzn$AMZN.Open[1:5]
amzn$AMZN.Open[1:5] > 3
amzn <- amzn[[1]] = 1
amzn[[1]] <- 1
head(amzn)
amzn[[1]] <- 38.68
class(amzn[[1]])
rownames(amzn)
rowname(amzn)
rownames(amzn)
?rownames
?index
head(sampleTimes)
class(sampleTimes[1])
year(sampleTimes[1])
yeara(sampleTimes[1])
years(sampleTimes[1])
wday(sampleTimes[1])
library(libridate)
library(lubridate)
years(sampleTimes[1])
year(sampleTimes[1])
month(sampleTimes[1])
sum(year(sampleTimes) == 2012)
wday(sampleTimes[1])
weekday(sampleTimes[1])
sum(year(sampleTimes) == 2012 & wday(sampleTimes) ==  2)
?gsub
setwd("C://Users/User/Desktop/MOOC/Exploratory Data Analysis/Project01/ExploratoryDataAnalysis_Project01/")
source("plot1.R")
source("plot1.R")
temp <- data
?merge
source("plot1.R")
temp <- data
DateTime <- strptime(paste(data$Date, data$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S")
head(DateTime)
data <- cbind(data, DateTime)
head(data)
plot(data$DateTime, data$Global_active_power)
?plot
plot(data$DateTime, data$Global_active_power, type = "l")
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
png("plot2.png")
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
png("plot22.png", width = 480, height = 480)
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
plot(data$DateTime, data$Sub_metering_1, col = "black")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "r")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l")
plot(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
lines(data$DateTime, data$Sub_metering_3, col = "blue", type = "l")
?legend
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1)
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5)
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2)
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5)
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5)
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2)
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1)
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
legend(c("topright"), col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1)
source("plot3.R")
par(mfrow = c(2,2,))
par(mfrow = c(2,2))
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
par(mfrow = c(2,2))
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(data$DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
lines(data$DateTime, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, border = "White")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
lines(data$DateTime, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, fill = "white", border = "White")
lines(data$DateTime, data$Sub_metering_3, col = "white", type = "l")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, bty = "o")
par(mfrow = c(2,2))
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(data$DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
lines(data$DateTime, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, bty = "o")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, bty = "n")
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
lines(data$DateTime, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, bty = "n")
par(mfrow = c(2,2))
# 1
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
# 2
plot(data$DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
# 3
plot(data$DateTime, data$Sub_metering_1, col = "black", type = "l", xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col = "red", type = "l")
lines(data$DateTime, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2, bty = "n")
# 4
plot(data$DateTime, data$Global_reactive_power, xlab = "datetime", type = "l")
with(data, plot(DateTime, Global_reactive_power, xlab = "datetime", type = "l"))
source("plot4.R")
